# yaml-language-server: $schema=values.schema.json

defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    configReloaders: true
    general: true
    k8sContainerCpuUsageSecondsTotal: true
    k8sContainerMemoryCache: true
    k8sContainerMemoryRss: true
    k8sContainerMemorySwap: true
    k8sContainerResource: true
    k8sContainerMemoryWorkingSetBytes: true
    k8sPodOwner: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverHistogram: true
    kubeApiserverSlos: true
    kubeControllerManager: true
    kubelet: true
    kubeProxy: false
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeSchedulerAlerting: true
    kubeSchedulerRecording: true
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true
    windows: false

global:
  rbac:
    create: true
    createAggregateClusterRoles: false
    pspEnabled: true

windowsMonitoring:
  enabled: false

alertmanager:
  enabled: true
  serviceAccount:
    create: true
  config:
    global:
      resolve_timeout: 5m
    inhibit_rules:
      - source_matchers:
          - 'severity = critical'
        target_matchers:
          - 'severity =~ warning|info'
        equal:
          - 'namespace'
          - 'alertname'
      - source_matchers:
          - 'severity = warning'
        target_matchers:
          - 'severity = info'
        equal:
          - 'namespace'
          - 'alertname'
      - source_matchers:
          - 'alertname = InfoInhibitor'
        target_matchers:
          - 'severity = info'
        equal:
          - 'namespace'
      - target_matchers:
          - 'alertname = InfoInhibitor'
    route:
      group_by: ['namespace']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: '""'
      routes:
      - receiver: '""'
        matchers:
          - alertname = "Watchdog"
    receivers:
    - name: '""'
    templates:
    - '/etc/alertmanager/config/*.tmpl'

  serviceMonitor:
    selfMonitor: true
  alertmanagerSpec:
    resources:
      requests:
        memory: 400Mi
    listenLocal: false
grafana:
  enabled: true
  defaultDashboardsEnabled: true
  defaultDashboardsTimezone: America/Los_Angeles
  defaultDashboardsEditable: true
  adminPassword: prom-operator
  rbac:
    pspEnabled: true
  serviceAccount:
    create: true
    autoMount: true
  serviceMonitor:
    enabled: true
kubernetesServiceMonitors:
  enabled: true

kubeApiServer:
  enabled: true
  tlsConfig:
    serverName: kubernetes
    insecureSkipVerify: false
kubelet:
  enabled: true
  namespace: kube-system
  serviceMonitor:
    attachMetadata:
      node: true
kubeControllerManager:
  enabled: true
  service:
    enabled: true
  serviceMonitor:
    enabled: true
coreDns:
  enabled: true
  service:
    enabled: true
  serviceMonitor:
    enabled: true

kubeEtcd:
  enabled: true
  service:
    enabled: true
  serviceMonitor:
    enabled: true
kubeScheduler:
  enabled: true
  service:
    enabled: true
  serviceMonitor:
    enabled: true
kubeProxy:
  enabled: false
kubeStateMetrics:
  enabled: true

kube-state-metrics:
  rbac:
    create: true
  releaseLabel: true
  prometheus:
    monitor:
      enabled: true

nodeExporter:
  enabled: true
  operatingSystems:
    linux:
      enabled: true
  forceDeployDashboards: false

prometheus-node-exporter:
  podLabels:
    jobLabel: node-exporter
  releaseLabel: true
  extraArgs:
    - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
    - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
  prometheus:
    monitor:
      enabled: true
  rbac:
    pspEnabled: true

prometheusOperator:
  enabled: true
  admissionWebhooks:
    enabled: true
    deployment:
      enabled: false
      resources:
        limits:
          cpu: 200m
          memory: 200Mi
        requests:
          cpu: 100m
          memory: 100Mi
    patch:
      enabled: true

    certManager:
      enabled: false
  networkPolicy:
    ## Enable creation of NetworkPolicy resources.
    ##
    enabled: false
  resources:
    limits:
      cpu: 1000m
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 100Mi

  prometheusConfigReloader:
    resources:
      requests:
        cpu: 200m
        memory: 50Mi
      limits:
        cpu: 200m
        memory: 50Mi
prometheus:
  enabled: true
  prometheusSpec:
    remoteWriteDashboards: true
    resources:
      requests:
        memory: 400Mi
      limits:
        memort: 4Gi
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: ceph-block
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi

